"""
extract information from the windows file generated by windows_picker
"""
import click
import numpy as np


def collect_info(raw_data):
    result = {}
    data_size = raw_data.shape[1]
    values_size = (data_size-3)//2
    for row in raw_data:
        id = row[0]
        direction = row[2]
        key = (id, direction)
        # see if the result[key] meets our requirement
        status = False
        for i in range(values_size):
            index1 = i*2+3
            index2 = i*2+4
            if(row[index1] != "None" and row[index2] != "None"):
                status = True
            if((row[index1] == "None" and row[index2] != "None") or (row[index1] != "None" and row[index2] == "None")):
                row[index1] = "None"
                row[index2] = "None"
        if(status):
            result[key] = row
        else:
            print(key)

    result_array = []
    for key in result:
        # print(result[key])
        result_array.append(result[key])
    result_array = np.array(result_array)

    # reorder result_array according to the gcarc
    # print(result_array.shape)
    gcarc_to_sort = result_array[:, 1].astype(np.float)
    sort_index = gcarc_to_sort.argsort()
    result_array = result_array[sort_index]
    return result_array


@click.command()
@click.option('--windows_path', required=True, type=str, help="the raw windows path")
@click.option('--output_path', required=True, type=str, help="the simplified windows path")
def main(windows_path, output_path):
    raw_data = np.loadtxt(windows_path, dtype=str)
    data = collect_info(raw_data)
    np.savetxt(output_path, data, fmt="%s")


if __name__ == "__main__":
    main()
